# Nome del Workflow
name: Create Plugin Release

# Trigger: si attiva quando viene pubblicato un nuovo tag che inizia con 'v' (es. v1.0.0, v1.2.3)
on:
  push:
    tags:
      - 'v*'

# Definisce i job da eseguire
jobs:
  build_and_release:
    # Nome del Job
    name: Build and Release Plugin Zip
    # Sistema operativo su cui eseguire il job
    runs-on: ubuntu-latest
    # Aggiunge i permessi necessari per creare la release e caricare l'asset
    permissions:
      contents: write

    # Passaggi del job
    steps:
      # 1. Checkout del codice dal repository
      - name: Checkout code
        uses: actions/checkout@v4 # Aggiornato a v4

      # 2. Setup di PHP
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2' # Assicurati che corrisponda al tuo requisito minimo
          extensions: mbstring, zip # Estensioni PHP necessarie
          coverage: none # Non serve la code coverage
          tools: composer # Installa Composer

      # 3. Installa TUTTE le dipendenze (incluse dev per compilare SCSS)
      - name: Install All Composer dependencies (including dev)
        run: composer install --no-interaction --prefer-dist

      # 4. Compila SCSS in CSS
      - name: Compile SCSS to CSS
        run: php bin/compile-scss.php # Esegue il nostro script di compilazione PHP

      # 5. Rimuovi le dipendenze di sviluppo
      - name: Remove dev dependencies
        run: composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist

      # 6. Crea l'archivio ZIP del plugin
      - name: Create plugin archive
        run: |
          # Nome della cartella del plugin (lo slug)
          PLUGIN_SLUG="cri-corsi"
          # Nome del file ZIP basato sul tag Git
          ZIP_FILE="${PLUGIN_SLUG}-$(echo ${GITHUB_REF#refs/tags/}).zip"
          # Crea la directory di build temporanea
          mkdir -p build/${PLUGIN_SLUG}
          # Copia i file necessari nell'archivio (escludendo file/cartelle di sviluppo)
          # AGGIUNTO: --exclude='wp-content/'
          rsync -rc --exclude='.git/' --exclude='.github/' --exclude='.editorconfig' --exclude='bin/' --exclude='assets/scss/' --exclude='composer.json' --exclude='composer.lock' --exclude='README.md' --exclude='REFACTOR_ROADMAP.md' --exclude='contributing.md' --exclude='build/' --exclude='wp-content/' ./ build/${PLUGIN_SLUG}/
          # Entra nella cartella di build e crea lo zip
          cd build
          zip -r ../${ZIP_FILE} ./${PLUGIN_SLUG}
          cd ..
          echo "ZIP_FILE_NAME=${ZIP_FILE}" >> $GITHUB_ENV

      # 7. Crea la Release su GitHub e carica lo ZIP
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Specificato esplicitamente
          files: ${{ env.ZIP_FILE_NAME }} # Il file ZIP da allegare
          # Opzionale: puoi aggiungere una descrizione o generare note di rilascio
          # body: |
          #   Release della versione ${{ github.ref_name }} del plugin CRI Corsi.
          # generate_release_notes: true

      # 8. Pulisci la cartella di build
      - name: Clean up build directory
        run: rm -rf build/

